console.log('This site was generated by Hugo.');
document.addEventListener("DOMContentLoaded", () => {
  const toggleButton = document.getElementById("theme-toggle");
  const html = document.documentElement;

  function updateIcon(theme) {
    // テキストを削除し、アイコンのみにする
    toggleButton.innerHTML = theme === "dark" ? "<i class=\"fas fa-sun\"></i>" : "<i class=\"fas fa-moon\"></i>";
  }

  function setGiscusTheme(theme) {
      const giscusFrame = document.querySelector('iframe.giscus-frame');
      if (giscusFrame) {
          giscusFrame.contentWindow.postMessage({ giscus: { setTheme: theme } }, 'https://giscus.app');
      }
  }

  // 初期状態をlocalStorageから
  const savedTheme = localStorage.getItem("theme") || "dark";
  html.setAttribute("data-theme", savedTheme);
  updateIcon(savedTheme);
  setGiscusTheme(savedTheme === "dark" ? "dark" : "light");

  toggleButton.addEventListener("click", () => {
    const current = html.getAttribute("data-theme");
    const next = current === "dark" ? "light" : "dark";
    html.setAttribute("data-theme", next);
    localStorage.setItem("theme", next);
    updateIcon(next);
    setGiscusTheme(next === "dark" ? "dark" : "light");
  });

  // giscusからのメッセージを監視してテーマを切り替える
  window.addEventListener('message', event => {
      if (event.origin !== 'https://giscus.app') return;
      if (event.data && event.data.giscus) {
          const savedTheme = localStorage.getItem("theme") || "dark";
          setGiscusTheme(savedTheme === "dark" ? "dark" : "light");
      }
  });

  // 外部リンクを新規タブで開く
  document.querySelectorAll('a').forEach(link => {
    const hostname = window.location.hostname;
    const linkHostname = new URL(link.href).hostname;
    if (linkHostname !== hostname && linkHostname.length > 0) {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener');
    }
  });

  // Image preview functionality
  const images = document.querySelectorAll('main img');
  
  const modal = document.createElement('div');
  modal.classList.add('image-preview-modal');
  const modalContent = document.createElement('img');
  modalContent.classList.add('image-preview-content');
  modal.appendChild(modalContent);
  document.body.appendChild(modal);

  images.forEach(img => {
    img.style.cursor = 'pointer'; // Add pointer cursor to indicate clickability
    img.addEventListener('click', () => {
      modal.classList.add('active');
      modalContent.src = img.src;
      document.body.classList.add('no-scroll');
    });
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.remove('active');
      document.body.classList.remove('no-scroll');
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      modal.classList.remove('active');
      document.body.classList.remove('no-scroll');
    }
  });
});